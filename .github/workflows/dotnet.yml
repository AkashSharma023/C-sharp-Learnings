name: Build and Run Changed .NET Projects

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Get changed folders
        id: changed
        run: |
          echo "##[group]Finding folders with changed .cs files"
          git fetch origin ${{ github.event.before }}
          FOLDERS=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} \
            | grep '\.cs$' \
            | grep -v '^.*\/obj\/' \
            | grep -v '^.*\/bin\/' \
            | xargs -n1 dirname | sort -u)
          echo "Changed folders:"
          echo "$FOLDERS"
          echo "folders<<EOF" >> $GITHUB_OUTPUT
          echo "$FOLDERS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "##[endgroup]"

      - name: Build and run projects in changed folders
        if: steps.changed.outputs.folders != ''
        env:
          CHANGED_FOLDERS: ${{ steps.changed.outputs.folders }}
        run: |
          echo "CHANGED_FOLDERS: $CHANGED_FOLDERS"
          IFS=$'\n'
          for folder in $CHANGED_FOLDERS; do
            echo "Checking $folder for .csproj files"
            for proj in $(find "$folder" -maxdepth 1 -name '*.csproj'); do
              echo "Building $proj"
              dotnet build "$proj"

              # ✅ fix: grep never fails the job
              OUTPUT_TYPE=$(grep -oPm1 "(?<=<OutputType>)[^<]+" "$proj" || true)

              if [ -z "$OUTPUT_TYPE" ]; then
                OUTPUT_TYPE="Library"
              fi

              echo "OutputType: $OUTPUT_TYPE"

              if [ "$OUTPUT_TYPE" = "Exe" ]; then
                echo "Running $proj"
                if ! dotnet run --project "$proj"; then
                  echo "⚠️ dotnet run for $proj exited non-zero but build passed."
                fi
              else
                echo "Skipping run for library project: $proj"
              fi
            done
          done

      - name: No projects changed
        if: steps.changed.outputs.folders == ''
        run: echo "No source file changes detected."
